//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketToRideGUI.GameBoardService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/GameServices")]
    public enum City : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Atlanta = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Boston = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Calgary = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Charleston = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Chicago = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dallas = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Denver = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Duluth = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ElPaso = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KansasCity = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Helena = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Houston = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LasVegas = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LittleRock = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LosAngeles = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Miami = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Montreal = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Nashville = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NewOrleans = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NewYork = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OklahomaCity = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Omaha = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Phoenix = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pittsburgh = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Portland = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Raleigh = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SaintLouis = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SaltLakeCity = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SanFrancisco = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SantaFe = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SaultSaintMarie = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seattle = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Toronto = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Vancouver = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Washington = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Winnipeg = 35,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrainCard", Namespace="http://schemas.datacontract.org/2004/07/GameServices")]
    [System.SerializableAttribute()]
    public partial class TrainCard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TicketToRideGUI.GameBoardService.TrainColor ColorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TicketToRideGUI.GameBoardService.TrainColor Color {
            get {
                return this.ColorField;
            }
            set {
                if ((this.ColorField.Equals(value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrainColor", Namespace="http://schemas.datacontract.org/2004/07/GameServices.LogicGame")]
    public enum TrainColor : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Orange = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yellow = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Green = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blue = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pink = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Black = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        White = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Locomotive = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Grey = 9,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GamerBoard", Namespace="http://schemas.datacontract.org/2004/07/GameServices")]
    [System.SerializableAttribute()]
    public partial class GamerBoard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TicketToRideGUI.GameBoardService.City CurrentLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TicketToRideGUI.GameBoardService.DestinationCard[] DestinationCardsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TicketToRideGUI.GameBoardService.City DestinationCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GamerTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamerTrainsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsWinnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TicketToRideGUI.GameBoardService.PlayerColor PlayerColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RouteFinishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SelectedRouteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TicketToRideGUI.GameBoardService.TrainCard[] TrainCardsDeckField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TicketToRideGUI.GameBoardService.City CurrentLocation {
            get {
                return this.CurrentLocationField;
            }
            set {
                if ((this.CurrentLocationField.Equals(value) != true)) {
                    this.CurrentLocationField = value;
                    this.RaisePropertyChanged("CurrentLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TicketToRideGUI.GameBoardService.DestinationCard[] DestinationCards {
            get {
                return this.DestinationCardsField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationCardsField, value) != true)) {
                    this.DestinationCardsField = value;
                    this.RaisePropertyChanged("DestinationCards");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TicketToRideGUI.GameBoardService.City DestinationCity {
            get {
                return this.DestinationCityField;
            }
            set {
                if ((this.DestinationCityField.Equals(value) != true)) {
                    this.DestinationCityField = value;
                    this.RaisePropertyChanged("DestinationCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GamerTag {
            get {
                return this.GamerTagField;
            }
            set {
                if ((object.ReferenceEquals(this.GamerTagField, value) != true)) {
                    this.GamerTagField = value;
                    this.RaisePropertyChanged("GamerTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamerTrains {
            get {
                return this.GamerTrainsField;
            }
            set {
                if ((this.GamerTrainsField.Equals(value) != true)) {
                    this.GamerTrainsField = value;
                    this.RaisePropertyChanged("GamerTrains");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsWinner {
            get {
                return this.IsWinnerField;
            }
            set {
                if ((this.IsWinnerField.Equals(value) != true)) {
                    this.IsWinnerField = value;
                    this.RaisePropertyChanged("IsWinner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TicketToRideGUI.GameBoardService.PlayerColor PlayerColor {
            get {
                return this.PlayerColorField;
            }
            set {
                if ((this.PlayerColorField.Equals(value) != true)) {
                    this.PlayerColorField = value;
                    this.RaisePropertyChanged("PlayerColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RouteFinished {
            get {
                return this.RouteFinishedField;
            }
            set {
                if ((this.RouteFinishedField.Equals(value) != true)) {
                    this.RouteFinishedField = value;
                    this.RaisePropertyChanged("RouteFinished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SelectedRoute {
            get {
                return this.SelectedRouteField;
            }
            set {
                if ((this.SelectedRouteField.Equals(value) != true)) {
                    this.SelectedRouteField = value;
                    this.RaisePropertyChanged("SelectedRoute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TicketToRideGUI.GameBoardService.TrainCard[] TrainCardsDeck {
            get {
                return this.TrainCardsDeckField;
            }
            set {
                if ((object.ReferenceEquals(this.TrainCardsDeckField, value) != true)) {
                    this.TrainCardsDeckField = value;
                    this.RaisePropertyChanged("TrainCardsDeck");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DestinationCard", Namespace="http://schemas.datacontract.org/2004/07/GameServices")]
    [System.SerializableAttribute()]
    public partial class DestinationCard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TicketToRideGUI.GameBoardService.City DestinationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TicketToRideGUI.GameBoardService.City OriginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TicketToRideGUI.GameBoardService.City Destination {
            get {
                return this.DestinationField;
            }
            set {
                if ((this.DestinationField.Equals(value) != true)) {
                    this.DestinationField = value;
                    this.RaisePropertyChanged("Destination");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TicketToRideGUI.GameBoardService.City Origin {
            get {
                return this.OriginField;
            }
            set {
                if ((this.OriginField.Equals(value) != true)) {
                    this.OriginField = value;
                    this.RaisePropertyChanged("Origin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointValue {
            get {
                return this.PointValueField;
            }
            set {
                if ((this.PointValueField.Equals(value) != true)) {
                    this.PointValueField = value;
                    this.RaisePropertyChanged("PointValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerColor", Namespace="http://schemas.datacontract.org/2004/07/GameServices.LogicGame")]
    public enum PlayerColor : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blue = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yellow = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Green = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Black = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameBoardService.IBoardGameService", CallbackContract=typeof(TicketToRideGUI.GameBoardService.IBoardGameServiceCallback))]
    public interface IBoardGameService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/InicialiceGame")]
        void InicialiceGame(string[] gamerTags, string IDLobbie);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/InicialiceGame")]
        System.Threading.Tasks.Task InicialiceGameAsync(string[] gamerTags, string IDLobbie);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/RegisterCallback")]
        void RegisterCallback(string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/RegisterCallback")]
        System.Threading.Tasks.Task RegisterCallbackAsync(string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetCardsFromPlayer")]
        void GetCardsFromPlayer(string gamerTag, string IDLobbie);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetCardsFromPlayer")]
        System.Threading.Tasks.Task GetCardsFromPlayerAsync(string gamerTag, string IDLobbie);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetCardsFromBoard")]
        void GetCardsFromBoard(string IDLobbie, string[] gamerTags);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetCardsFromBoard")]
        System.Threading.Tasks.Task GetCardsFromBoardAsync(string IDLobbie, string[] gamerTags);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetTurnPlayer")]
        void GetTurnPlayer(string IDLobbie);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetTurnPlayer")]
        System.Threading.Tasks.Task GetTurnPlayerAsync(string IDLobbie);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetGamerInformation")]
        void GetGamerInformation(string IDLobbie, string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetGamerInformation")]
        System.Threading.Tasks.Task GetGamerInformationAsync(string IDLobbie, string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/StartRoute")]
        void StartRoute(string IDLobbie, string gamerTag, TicketToRideGUI.GameBoardService.City[] cityCard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/StartRoute")]
        System.Threading.Tasks.Task StartRouteAsync(string IDLobbie, string gamerTag, TicketToRideGUI.GameBoardService.City[] cityCard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetMarkers")]
        void GetMarkers(string IdLobbie);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetMarkers")]
        System.Threading.Tasks.Task GetMarkersAsync(string IdLobbie);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ClaimTrainCard")]
        void ClaimTrainCard(string IDLobbie, string gamerTag, TicketToRideGUI.GameBoardService.TrainCard cardTrainColor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ClaimTrainCard")]
        System.Threading.Tasks.Task ClaimTrainCardAsync(string IDLobbie, string gamerTag, TicketToRideGUI.GameBoardService.TrainCard cardTrainColor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ClaimDeckTrainCard")]
        void ClaimDeckTrainCard(string IDLobbie, string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ClaimDeckTrainCard")]
        System.Threading.Tasks.Task ClaimDeckTrainCardAsync(string IDLobbie, string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetAvailableCyties")]
        void GetAvailableCyties(string IDLobbie, string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/GetAvailableCyties")]
        System.Threading.Tasks.Task GetAvailableCytiesAsync(string IDLobbie, string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ClaimRoute")]
        void ClaimRoute(string IdLobbie, string gamerTag, string CityName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ClaimRoute")]
        System.Threading.Tasks.Task ClaimRouteAsync(string IdLobbie, string gamerTag, string CityName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBoardGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveResponseInicialiceGame")]
        void ReceiveResponseInicialiceGame(bool response);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveResponseRegisterCallback")]
        void ReceiveResponseRegisterCallback(bool response);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveResponseGetCardsFromPlayer")]
        void ReceiveResponseGetCardsFromPlayer(TicketToRideGUI.GameBoardService.GamerBoard gamerBoard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveResponseGetCardsFromBoard")]
        void ReceiveResponseGetCardsFromBoard(TicketToRideGUI.GameBoardService.TrainCard[] boardCards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveResponseGetTurnPlayer")]
        void ReceiveResponseGetTurnPlayer(TicketToRideGUI.GameBoardService.GamerBoard gamerBoard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveResponseGetGamerInformation")]
        void ReceiveResponseGetGamerInformation(TicketToRideGUI.GameBoardService.GamerBoard gamerBoard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveResponseGetMarkers")]
        void ReceiveResponseGetMarkers(System.Collections.Generic.Queue<TicketToRideGUI.GameBoardService.GamerBoard> gamerBoards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveUpdateCity")]
        void ReceiveUpdateCity(TicketToRideGUI.GameBoardService.GamerBoard gamerBoard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveResponseClaimDeckTrainCard")]
        void ReceiveResponseClaimDeckTrainCard(TicketToRideGUI.GameBoardService.TrainCard trainCard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveResponseGetAvailableCyties")]
        void ReceiveResponseGetAvailableCyties(TicketToRideGUI.GameBoardService.City[] cities, TicketToRideGUI.GameBoardService.GamerBoard gamerBoard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReceiveResponseClaimRoute")]
        void ReceiveResponseClaimRoute(TicketToRideGUI.GameBoardService.GamerBoard gamerBoard, string cityOrigin);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoardGameService/ReciveResponseFinalyGame")]
        void ReciveResponseFinalyGame(TicketToRideGUI.GameBoardService.GamerBoard gamerBoard);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBoardGameServiceChannel : TicketToRideGUI.GameBoardService.IBoardGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BoardGameServiceClient : System.ServiceModel.DuplexClientBase<TicketToRideGUI.GameBoardService.IBoardGameService>, TicketToRideGUI.GameBoardService.IBoardGameService {
        
        public BoardGameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public BoardGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public BoardGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BoardGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BoardGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void InicialiceGame(string[] gamerTags, string IDLobbie) {
            base.Channel.InicialiceGame(gamerTags, IDLobbie);
        }
        
        public System.Threading.Tasks.Task InicialiceGameAsync(string[] gamerTags, string IDLobbie) {
            return base.Channel.InicialiceGameAsync(gamerTags, IDLobbie);
        }
        
        public void RegisterCallback(string gamerTag) {
            base.Channel.RegisterCallback(gamerTag);
        }
        
        public System.Threading.Tasks.Task RegisterCallbackAsync(string gamerTag) {
            return base.Channel.RegisterCallbackAsync(gamerTag);
        }
        
        public void GetCardsFromPlayer(string gamerTag, string IDLobbie) {
            base.Channel.GetCardsFromPlayer(gamerTag, IDLobbie);
        }
        
        public System.Threading.Tasks.Task GetCardsFromPlayerAsync(string gamerTag, string IDLobbie) {
            return base.Channel.GetCardsFromPlayerAsync(gamerTag, IDLobbie);
        }
        
        public void GetCardsFromBoard(string IDLobbie, string[] gamerTags) {
            base.Channel.GetCardsFromBoard(IDLobbie, gamerTags);
        }
        
        public System.Threading.Tasks.Task GetCardsFromBoardAsync(string IDLobbie, string[] gamerTags) {
            return base.Channel.GetCardsFromBoardAsync(IDLobbie, gamerTags);
        }
        
        public void GetTurnPlayer(string IDLobbie) {
            base.Channel.GetTurnPlayer(IDLobbie);
        }
        
        public System.Threading.Tasks.Task GetTurnPlayerAsync(string IDLobbie) {
            return base.Channel.GetTurnPlayerAsync(IDLobbie);
        }
        
        public void GetGamerInformation(string IDLobbie, string gamerTag) {
            base.Channel.GetGamerInformation(IDLobbie, gamerTag);
        }
        
        public System.Threading.Tasks.Task GetGamerInformationAsync(string IDLobbie, string gamerTag) {
            return base.Channel.GetGamerInformationAsync(IDLobbie, gamerTag);
        }
        
        public void StartRoute(string IDLobbie, string gamerTag, TicketToRideGUI.GameBoardService.City[] cityCard) {
            base.Channel.StartRoute(IDLobbie, gamerTag, cityCard);
        }
        
        public System.Threading.Tasks.Task StartRouteAsync(string IDLobbie, string gamerTag, TicketToRideGUI.GameBoardService.City[] cityCard) {
            return base.Channel.StartRouteAsync(IDLobbie, gamerTag, cityCard);
        }
        
        public void GetMarkers(string IdLobbie) {
            base.Channel.GetMarkers(IdLobbie);
        }
        
        public System.Threading.Tasks.Task GetMarkersAsync(string IdLobbie) {
            return base.Channel.GetMarkersAsync(IdLobbie);
        }
        
        public void ClaimTrainCard(string IDLobbie, string gamerTag, TicketToRideGUI.GameBoardService.TrainCard cardTrainColor) {
            base.Channel.ClaimTrainCard(IDLobbie, gamerTag, cardTrainColor);
        }
        
        public System.Threading.Tasks.Task ClaimTrainCardAsync(string IDLobbie, string gamerTag, TicketToRideGUI.GameBoardService.TrainCard cardTrainColor) {
            return base.Channel.ClaimTrainCardAsync(IDLobbie, gamerTag, cardTrainColor);
        }
        
        public void ClaimDeckTrainCard(string IDLobbie, string gamerTag) {
            base.Channel.ClaimDeckTrainCard(IDLobbie, gamerTag);
        }
        
        public System.Threading.Tasks.Task ClaimDeckTrainCardAsync(string IDLobbie, string gamerTag) {
            return base.Channel.ClaimDeckTrainCardAsync(IDLobbie, gamerTag);
        }
        
        public void GetAvailableCyties(string IDLobbie, string gamerTag) {
            base.Channel.GetAvailableCyties(IDLobbie, gamerTag);
        }
        
        public System.Threading.Tasks.Task GetAvailableCytiesAsync(string IDLobbie, string gamerTag) {
            return base.Channel.GetAvailableCytiesAsync(IDLobbie, gamerTag);
        }
        
        public void ClaimRoute(string IdLobbie, string gamerTag, string CityName) {
            base.Channel.ClaimRoute(IdLobbie, gamerTag, CityName);
        }
        
        public System.Threading.Tasks.Task ClaimRouteAsync(string IdLobbie, string gamerTag, string CityName) {
            return base.Channel.ClaimRouteAsync(IdLobbie, gamerTag, CityName);
        }
    }
}
