//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketToRideGUI.LobbiesService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LobbiesService.ILobbies", CallbackContract=typeof(TicketToRideGUI.LobbiesService.ILobbiesCallback))]
    public interface ILobbies {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbies/CreateLobbie")]
        void CreateLobbie(string gamerKeyHost, string GamerTagHost, int capacity);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbies/CreateLobbie")]
        System.Threading.Tasks.Task CreateLobbieAsync(string gamerKeyHost, string GamerTagHost, int capacity);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbies/JoinLobbie")]
        void JoinLobbie(string lobbieID, string gamerKey, string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbies/JoinLobbie")]
        System.Threading.Tasks.Task JoinLobbieAsync(string lobbieID, string gamerKey, string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbies/ExistLobbie")]
        void ExistLobbie(string lobbieID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbies/ExistLobbie")]
        System.Threading.Tasks.Task ExistLobbieAsync(string lobbieID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbies/IsEndedLobbie")]
        void IsEndedLobbie(string lobbieID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbies/IsEndedLobbie")]
        System.Threading.Tasks.Task IsEndedLobbieAsync(string lobbieID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbies/LobbieAreAvailable")]
        void LobbieAreAvailable(string lobbieID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbies/LobbieAreAvailable")]
        System.Threading.Tasks.Task LobbieAreAvailableAsync(string lobbieID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbiesCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbies/ConfirmationCreationLobbie", ReplyAction="http://tempuri.org/ILobbies/ConfirmationCreationLobbieResponse")]
        void ConfirmationCreationLobbie(bool confirmation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbies/ReceiveLobbieID", ReplyAction="http://tempuri.org/ILobbies/ReceiveLobbieIDResponse")]
        void ReceiveLobbieID(string lobbieID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbies/JoinedSucessFull", ReplyAction="http://tempuri.org/ILobbies/JoinedSucessFullResponse")]
        void JoinedSucessFull(bool joinedSuccessful);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbies/ReceiveResponseExistLobbie", ReplyAction="http://tempuri.org/ILobbies/ReceiveResponseExistLobbieResponse")]
        void ReceiveResponseExistLobbie(bool response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbies/ReceiveResponseIsEndedLobbie", ReplyAction="http://tempuri.org/ILobbies/ReceiveResponseIsEndedLobbieResponse")]
        void ReceiveResponseIsEndedLobbie(bool response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbies/ReceiveResponseLobbieAreAvailable", ReplyAction="http://tempuri.org/ILobbies/ReceiveResponseLobbieAreAvailableResponse")]
        void ReceiveResponseLobbieAreAvailable(bool response);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbiesChannel : TicketToRideGUI.LobbiesService.ILobbies, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbiesClient : System.ServiceModel.DuplexClientBase<TicketToRideGUI.LobbiesService.ILobbies>, TicketToRideGUI.LobbiesService.ILobbies {
        
        public LobbiesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbiesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbiesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbiesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbiesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CreateLobbie(string gamerKeyHost, string GamerTagHost, int capacity) {
            base.Channel.CreateLobbie(gamerKeyHost, GamerTagHost, capacity);
        }
        
        public System.Threading.Tasks.Task CreateLobbieAsync(string gamerKeyHost, string GamerTagHost, int capacity) {
            return base.Channel.CreateLobbieAsync(gamerKeyHost, GamerTagHost, capacity);
        }
        
        public void JoinLobbie(string lobbieID, string gamerKey, string gamerTag) {
            base.Channel.JoinLobbie(lobbieID, gamerKey, gamerTag);
        }
        
        public System.Threading.Tasks.Task JoinLobbieAsync(string lobbieID, string gamerKey, string gamerTag) {
            return base.Channel.JoinLobbieAsync(lobbieID, gamerKey, gamerTag);
        }
        
        public void ExistLobbie(string lobbieID) {
            base.Channel.ExistLobbie(lobbieID);
        }
        
        public System.Threading.Tasks.Task ExistLobbieAsync(string lobbieID) {
            return base.Channel.ExistLobbieAsync(lobbieID);
        }
        
        public void IsEndedLobbie(string lobbieID) {
            base.Channel.IsEndedLobbie(lobbieID);
        }
        
        public System.Threading.Tasks.Task IsEndedLobbieAsync(string lobbieID) {
            return base.Channel.IsEndedLobbieAsync(lobbieID);
        }
        
        public void LobbieAreAvailable(string lobbieID) {
            base.Channel.LobbieAreAvailable(lobbieID);
        }
        
        public System.Threading.Tasks.Task LobbieAreAvailableAsync(string lobbieID) {
            return base.Channel.LobbieAreAvailableAsync(lobbieID);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LobbiesService.IGameRoom", CallbackContract=typeof(TicketToRideGUI.LobbiesService.IGameRoomCallback))]
    public interface IGameRoom {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/IsLobbieHost")]
        void IsLobbieHost(string gamerKey, string lobbieID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/IsLobbieHost")]
        System.Threading.Tasks.Task IsLobbieHostAsync(string gamerKey, string lobbieID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/ExitFromLobbie")]
        void ExitFromLobbie(string lobbieID, string gamerKey, string gamerTag, bool isHost);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/ExitFromLobbie")]
        System.Threading.Tasks.Task ExitFromLobbieAsync(string lobbieID, string gamerKey, string gamerTag, bool isHost);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/GetFriendList")]
        void GetFriendList(string gamerKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/GetFriendList")]
        System.Threading.Tasks.Task GetFriendListAsync(string gamerKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/Invitatefriend")]
        void Invitatefriend(string gamerTag, string gamerTagFriend, string lobbieID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/Invitatefriend")]
        System.Threading.Tasks.Task InvitatefriendAsync(string gamerTag, string gamerTagFriend, string lobbieID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/GoToTheGame")]
        void GoToTheGame(string[] gamers);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/GoToTheGame")]
        System.Threading.Tasks.Task GoToTheGameAsync(string[] gamers);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameRoomCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameRoom/ReceiveResponseIsLobbieHost", ReplyAction="http://tempuri.org/IGameRoom/ReceiveResponseIsLobbieHostResponse")]
        void ReceiveResponseIsLobbieHost(bool isLobbieHost);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/UpdatePlayerListRealTime")]
        void UpdatePlayerListRealTime(string[] playerList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameRoom/ReceiveResponseExitFromLobbie", ReplyAction="http://tempuri.org/IGameRoom/ReceiveResponseExitFromLobbieResponse")]
        void ReceiveResponseExitFromLobbie(bool response);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/ReceiveFriendList")]
        void ReceiveFriendList(string[] friendList);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/ReceiveConfirmationOfInvitation")]
        void ReceiveConfirmationOfInvitation(bool confirmationOfInvitation);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameRoom/ReceiveResponseGoToTheGame")]
        void ReceiveResponseGoToTheGame();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameRoomChannel : TicketToRideGUI.LobbiesService.IGameRoom, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameRoomClient : System.ServiceModel.DuplexClientBase<TicketToRideGUI.LobbiesService.IGameRoom>, TicketToRideGUI.LobbiesService.IGameRoom {
        
        public GameRoomClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameRoomClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameRoomClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameRoomClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameRoomClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void IsLobbieHost(string gamerKey, string lobbieID) {
            base.Channel.IsLobbieHost(gamerKey, lobbieID);
        }
        
        public System.Threading.Tasks.Task IsLobbieHostAsync(string gamerKey, string lobbieID) {
            return base.Channel.IsLobbieHostAsync(gamerKey, lobbieID);
        }
        
        public void ExitFromLobbie(string lobbieID, string gamerKey, string gamerTag, bool isHost) {
            base.Channel.ExitFromLobbie(lobbieID, gamerKey, gamerTag, isHost);
        }
        
        public System.Threading.Tasks.Task ExitFromLobbieAsync(string lobbieID, string gamerKey, string gamerTag, bool isHost) {
            return base.Channel.ExitFromLobbieAsync(lobbieID, gamerKey, gamerTag, isHost);
        }
        
        public void GetFriendList(string gamerKey) {
            base.Channel.GetFriendList(gamerKey);
        }
        
        public System.Threading.Tasks.Task GetFriendListAsync(string gamerKey) {
            return base.Channel.GetFriendListAsync(gamerKey);
        }
        
        public void Invitatefriend(string gamerTag, string gamerTagFriend, string lobbieID) {
            base.Channel.Invitatefriend(gamerTag, gamerTagFriend, lobbieID);
        }
        
        public System.Threading.Tasks.Task InvitatefriendAsync(string gamerTag, string gamerTagFriend, string lobbieID) {
            return base.Channel.InvitatefriendAsync(gamerTag, gamerTagFriend, lobbieID);
        }
        
        public void GoToTheGame(string[] gamers) {
            base.Channel.GoToTheGame(gamers);
        }
        
        public System.Threading.Tasks.Task GoToTheGameAsync(string[] gamers) {
            return base.Channel.GoToTheGameAsync(gamers);
        }
    }
}
