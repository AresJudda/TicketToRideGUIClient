//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketToRideGUI.TicketToRideService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Friend", Namespace="http://schemas.datacontract.org/2004/07/GameServices")]
    [System.SerializableAttribute()]
    public partial class Friend : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GamerTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConnectedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GamerTag {
            get {
                return this.GamerTagField;
            }
            set {
                if ((object.ReferenceEquals(this.GamerTagField, value) != true)) {
                    this.GamerTagField = value;
                    this.RaisePropertyChanged("GamerTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/GameServices")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketToRideGUI.TicketToRideService.Player))]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/GameServices")]
    [System.SerializableAttribute()]
    public partial class Player : TicketToRideGUI.TicketToRideService.User {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GamerKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GamerTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReportsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GamerKey {
            get {
                return this.GamerKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.GamerKeyField, value) != true)) {
                    this.GamerKeyField = value;
                    this.RaisePropertyChanged("GamerKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GamerTag {
            get {
                return this.GamerTagField;
            }
            set {
                if ((object.ReferenceEquals(this.GamerTagField, value) != true)) {
                    this.GamerTagField = value;
                    this.RaisePropertyChanged("GamerTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Reports {
            get {
                return this.ReportsField;
            }
            set {
                if ((this.ReportsField.Equals(value) != true)) {
                    this.ReportsField = value;
                    this.RaisePropertyChanged("Reports");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketToRideService.IGameServices", CallbackContract=typeof(TicketToRideGUI.TicketToRideService.IGameServicesCallback))]
    public interface IGameServices {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/CheckFriendsConnected")]
        void CheckFriendsConnected(string gamerKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/CheckFriendsConnected")]
        System.Threading.Tasks.Task CheckFriendsConnectedAsync(string gamerKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SearchPlayers")]
        void SearchPlayers(string chars, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SearchPlayers")]
        System.Threading.Tasks.Task SearchPlayersAsync(string chars, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SendFriendRequest")]
        void SendFriendRequest(string gamerKey, string gamerKeyFriend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/SendFriendRequest")]
        System.Threading.Tasks.Task SendFriendRequestAsync(string gamerKey, string gamerKeyFriend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/CheckFriendsRequest")]
        void CheckFriendsRequest(string gamerKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/CheckFriendsRequest")]
        System.Threading.Tasks.Task CheckFriendsRequestAsync(string gamerKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/RejectFriendRequest")]
        void RejectFriendRequest(string gamerKey, string gamerKeyFriend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/RejectFriendRequest")]
        System.Threading.Tasks.Task RejectFriendRequestAsync(string gamerKey, string gamerKeyFriend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/AcceptFriendRequest")]
        void AcceptFriendRequest(string gamerKey, string gamerKeyFriend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/AcceptFriendRequest")]
        System.Threading.Tasks.Task AcceptFriendRequestAsync(string gamerKey, string gamerKeyFriend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/CheckFriendsConnect")]
        void CheckFriendsConnect(string gamerKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/CheckFriendsConnect")]
        System.Threading.Tasks.Task CheckFriendsConnectAsync(string gamerKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServicesCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/ReciveOnlineFriendList")]
        void ReciveOnlineFriendList(TicketToRideGUI.TicketToRideService.Friend[] friends);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/ReciveListPlayers")]
        void ReciveListPlayers(string[] players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/ReciveConfirmationFriendRequest")]
        void ReciveConfirmationFriendRequest(bool response);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/ReciveListFriendRequest")]
        void ReciveListFriendRequest(string[] players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/ReciveResponseFriendRequest")]
        void ReciveResponseFriendRequest(bool response);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServices/RecivePlayerDisconnected")]
        void RecivePlayerDisconnected(string disconnectedGamerKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServicesChannel : TicketToRideGUI.TicketToRideService.IGameServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServicesClient : System.ServiceModel.DuplexClientBase<TicketToRideGUI.TicketToRideService.IGameServices>, TicketToRideGUI.TicketToRideService.IGameServices {
        
        public GameServicesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServicesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CheckFriendsConnected(string gamerKey) {
            base.Channel.CheckFriendsConnected(gamerKey);
        }
        
        public System.Threading.Tasks.Task CheckFriendsConnectedAsync(string gamerKey) {
            return base.Channel.CheckFriendsConnectedAsync(gamerKey);
        }
        
        public void SearchPlayers(string chars, string email) {
            base.Channel.SearchPlayers(chars, email);
        }
        
        public System.Threading.Tasks.Task SearchPlayersAsync(string chars, string email) {
            return base.Channel.SearchPlayersAsync(chars, email);
        }
        
        public void SendFriendRequest(string gamerKey, string gamerKeyFriend) {
            base.Channel.SendFriendRequest(gamerKey, gamerKeyFriend);
        }
        
        public System.Threading.Tasks.Task SendFriendRequestAsync(string gamerKey, string gamerKeyFriend) {
            return base.Channel.SendFriendRequestAsync(gamerKey, gamerKeyFriend);
        }
        
        public void CheckFriendsRequest(string gamerKey) {
            base.Channel.CheckFriendsRequest(gamerKey);
        }
        
        public System.Threading.Tasks.Task CheckFriendsRequestAsync(string gamerKey) {
            return base.Channel.CheckFriendsRequestAsync(gamerKey);
        }
        
        public void RejectFriendRequest(string gamerKey, string gamerKeyFriend) {
            base.Channel.RejectFriendRequest(gamerKey, gamerKeyFriend);
        }
        
        public System.Threading.Tasks.Task RejectFriendRequestAsync(string gamerKey, string gamerKeyFriend) {
            return base.Channel.RejectFriendRequestAsync(gamerKey, gamerKeyFriend);
        }
        
        public void AcceptFriendRequest(string gamerKey, string gamerKeyFriend) {
            base.Channel.AcceptFriendRequest(gamerKey, gamerKeyFriend);
        }
        
        public System.Threading.Tasks.Task AcceptFriendRequestAsync(string gamerKey, string gamerKeyFriend) {
            return base.Channel.AcceptFriendRequestAsync(gamerKey, gamerKeyFriend);
        }
        
        public void CheckFriendsConnect(string gamerKey) {
            base.Channel.CheckFriendsConnect(gamerKey);
        }
        
        public System.Threading.Tasks.Task CheckFriendsConnectAsync(string gamerKey) {
            return base.Channel.CheckFriendsConnectAsync(gamerKey);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketToRideService.IUserPlayer")]
    public interface IUserPlayer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/AddUser", ReplyAction="http://tempuri.org/IUserPlayer/AddUserResponse")]
        bool AddUser(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/AddUser", ReplyAction="http://tempuri.org/IUserPlayer/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/AddPlayer", ReplyAction="http://tempuri.org/IUserPlayer/AddPlayerResponse")]
        bool AddPlayer(TicketToRideGUI.TicketToRideService.Player userPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/AddPlayer", ReplyAction="http://tempuri.org/IUserPlayer/AddPlayerResponse")]
        System.Threading.Tasks.Task<bool> AddPlayerAsync(TicketToRideGUI.TicketToRideService.Player userPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/IsPlayerExisting", ReplyAction="http://tempuri.org/IUserPlayer/IsPlayerExistingResponse")]
        bool IsPlayerExisting(string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/IsPlayerExisting", ReplyAction="http://tempuri.org/IUserPlayer/IsPlayerExistingResponse")]
        System.Threading.Tasks.Task<bool> IsPlayerExistingAsync(string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/AuthenticateUser", ReplyAction="http://tempuri.org/IUserPlayer/AuthenticateUserResponse")]
        bool AuthenticateUser(TicketToRideGUI.TicketToRideService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/AuthenticateUser", ReplyAction="http://tempuri.org/IUserPlayer/AuthenticateUserResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateUserAsync(TicketToRideGUI.TicketToRideService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/SearchGamerKey", ReplyAction="http://tempuri.org/IUserPlayer/SearchGamerKeyResponse")]
        string SearchGamerKey(string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/SearchGamerKey", ReplyAction="http://tempuri.org/IUserPlayer/SearchGamerKeyResponse")]
        System.Threading.Tasks.Task<string> SearchGamerKeyAsync(string gamerTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/GetGamerKey", ReplyAction="http://tempuri.org/IUserPlayer/GetGamerKeyResponse")]
        string GetGamerKey(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/GetGamerKey", ReplyAction="http://tempuri.org/IUserPlayer/GetGamerKeyResponse")]
        System.Threading.Tasks.Task<string> GetGamerKeyAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/IsEmailExisting", ReplyAction="http://tempuri.org/IUserPlayer/IsEmailExistingResponse")]
        bool IsEmailExisting(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/IsEmailExisting", ReplyAction="http://tempuri.org/IUserPlayer/IsEmailExistingResponse")]
        System.Threading.Tasks.Task<bool> IsEmailExistingAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/GetGamerTag", ReplyAction="http://tempuri.org/IUserPlayer/GetGamerTagResponse")]
        string GetGamerTag(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserPlayer/GetGamerTag", ReplyAction="http://tempuri.org/IUserPlayer/GetGamerTagResponse")]
        System.Threading.Tasks.Task<string> GetGamerTagAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserPlayerChannel : TicketToRideGUI.TicketToRideService.IUserPlayer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserPlayerClient : System.ServiceModel.ClientBase<TicketToRideGUI.TicketToRideService.IUserPlayer>, TicketToRideGUI.TicketToRideService.IUserPlayer {
        
        public UserPlayerClient() {
        }
        
        public UserPlayerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserPlayerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserPlayerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserPlayerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddUser(string email, string password) {
            return base.Channel.AddUser(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(string email, string password) {
            return base.Channel.AddUserAsync(email, password);
        }
        
        public bool AddPlayer(TicketToRideGUI.TicketToRideService.Player userPlayer) {
            return base.Channel.AddPlayer(userPlayer);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlayerAsync(TicketToRideGUI.TicketToRideService.Player userPlayer) {
            return base.Channel.AddPlayerAsync(userPlayer);
        }
        
        public bool IsPlayerExisting(string gamerTag) {
            return base.Channel.IsPlayerExisting(gamerTag);
        }
        
        public System.Threading.Tasks.Task<bool> IsPlayerExistingAsync(string gamerTag) {
            return base.Channel.IsPlayerExistingAsync(gamerTag);
        }
        
        public bool AuthenticateUser(TicketToRideGUI.TicketToRideService.User user) {
            return base.Channel.AuthenticateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateUserAsync(TicketToRideGUI.TicketToRideService.User user) {
            return base.Channel.AuthenticateUserAsync(user);
        }
        
        public string SearchGamerKey(string gamerTag) {
            return base.Channel.SearchGamerKey(gamerTag);
        }
        
        public System.Threading.Tasks.Task<string> SearchGamerKeyAsync(string gamerTag) {
            return base.Channel.SearchGamerKeyAsync(gamerTag);
        }
        
        public string GetGamerKey(string email) {
            return base.Channel.GetGamerKey(email);
        }
        
        public System.Threading.Tasks.Task<string> GetGamerKeyAsync(string email) {
            return base.Channel.GetGamerKeyAsync(email);
        }
        
        public bool IsEmailExisting(string email) {
            return base.Channel.IsEmailExisting(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailExistingAsync(string email) {
            return base.Channel.IsEmailExistingAsync(email);
        }
        
        public string GetGamerTag(string email) {
            return base.Channel.GetGamerTag(email);
        }
        
        public System.Threading.Tasks.Task<string> GetGamerTagAsync(string email) {
            return base.Channel.GetGamerTagAsync(email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketToRideService.IPlayersConnect", CallbackContract=typeof(TicketToRideGUI.TicketToRideService.IPlayersConnectCallback))]
    public interface IPlayersConnect {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayersConnect/ConnectToTheGame")]
        void ConnectToTheGame(string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayersConnect/ConnectToTheGame")]
        System.Threading.Tasks.Task ConnectToTheGameAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayersConnect/DisconnectFromTheGame")]
        void DisconnectFromTheGame(string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayersConnect/DisconnectFromTheGame")]
        System.Threading.Tasks.Task DisconnectFromTheGameAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayersConnectCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayersConnect/ReceiveResponseConnectStatus")]
        void ReceiveResponseConnectStatus();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayersConnectChannel : TicketToRideGUI.TicketToRideService.IPlayersConnect, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayersConnectClient : System.ServiceModel.DuplexClientBase<TicketToRideGUI.TicketToRideService.IPlayersConnect>, TicketToRideGUI.TicketToRideService.IPlayersConnect {
        
        public PlayersConnectClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayersConnectClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayersConnectClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayersConnectClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayersConnectClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToTheGame(string email) {
            base.Channel.ConnectToTheGame(email);
        }
        
        public System.Threading.Tasks.Task ConnectToTheGameAsync(string email) {
            return base.Channel.ConnectToTheGameAsync(email);
        }
        
        public void DisconnectFromTheGame(string email) {
            base.Channel.DisconnectFromTheGame(email);
        }
        
        public System.Threading.Tasks.Task DisconnectFromTheGameAsync(string email) {
            return base.Channel.DisconnectFromTheGameAsync(email);
        }
    }
}
